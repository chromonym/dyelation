plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}
	maven {
        name = "Ladysnake Mods"
        url = 'https://maven.ladysnake.org/releases'
    }
	maven {
        url = "https://maven.modmuss50.me/"
    }
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
	maven {
		name = "Greenhouse Maven"
		url = 'https://maven.greenhouseteam.dev/releases/'
	}
	maven { url = "https://mvn.devos.one/releases/" } // Porting Lib
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release" // Reach Entity Attributes (Required by Porting Lib)
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		name = "FzzyMaven"
		url = "https://maven.fzzyhmstrs.me/"
	}
	maven {
        url "https://maven.firstdarkdev.xyz/snapshots"
    }
	maven {
		name = "tterrag maven"
		url = uri("https://maven.tterrag.com/")
		content {
			includeGroup("com.jozufozu.flywheel")
		}
	}
	maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"dyelation" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

fabricApi {
	configureDataGeneration {
		client = true
		modId = "dyelation"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Dye Depot - the mod this one is an addon for
	modImplementation "maven.modrinth:dye-depot:${project.dye_depot_version}-fabric"

	// Fzzy Config - used for the. config.
	modImplementation "me.fzzyhmstrs:fzzy_config:${project.fzzy_config_version}+${project.minecraft_version}"

	// MODS THAT REQUIRE THIS MOD TO ADD BLOCKS/ITEMS/ETC
	// Another Furniture (stools, curtains, lamps, sofas, tall stools)
	modCompileOnly("maven.modrinth:another-furniture:${project.another_furniture_version}")
	modLocalRuntime("maven.modrinth:another-furniture:${project.another_furniture_version}")
	// Bundle Backportish (bundles)
	modCompileOnly("maven.modrinth:bundle-backportish:${project.bundle_backportish_version}")
	modLocalRuntime("maven.modrinth:bundle-backportish:${project.bundle_backportish_version}")
	// Desire (concrete bricks, terracotta mosaics)
	modCompileOnly("maven.modrinth:desiremod:${project.desire_version}-${project.minecraft_version}")
	modLocalRuntime("maven.modrinth:desiremod:${project.desire_version}-${project.minecraft_version}")
	// Farmer's Delight (Refabricated) (canvas signs)
	modCompileOnly("vectorwing:FarmersDelight:${project.minecraft_version}-${project.farmers_delight_version}+refabricated")
	modLocalRuntime("vectorwing:FarmersDelight:${project.minecraft_version}-${project.farmers_delight_version}+refabricated")
	// Items Displayed [Fabric] (jewelry pillows)
	modCompileOnly("maven.modrinth:items-displayed:${project.items_displayed_version}-${project.minecraft_version}")
	modLocalRuntime("maven.modrinth:items-displayed:${project.items_displayed_version}-${project.minecraft_version}")
	// Spelunkery (glowsticks)
	modCompileOnly("maven.modrinth:spelunkery:${project.minecraft_version}-${project.spelunkery_version}")
	modLocalRuntime("maven.modrinth:spelunkery:${project.minecraft_version}-${project.spelunkery_version}")
	// Verdant (primrose)
	modCompileOnly("maven.modrinth:verdant-mod:${project.minecraft_version}-${project.verdant_version}")
	modLocalRuntime("maven.modrinth:verdant-mod:${project.minecraft_version}-${project.verdant_version}")

	// MODS THAT AUTOMATICALLY ADD DYE DEPOT COLOURED ITEMS BUT REQUIRE DATAPACKS/RESOURCEPACKS TO FIX
	// Adorn (sofas, table lamps, candlelit lanterns)
	modCompileOnly("maven.modrinth:adorn:${project.adorn_version}-fabric")
	modLocalRuntime("maven.modrinth:adorn:${project.adorn_version}-fabric")

	// REQUIREMENTS FOR ANY ABOVE MODS
	// Moonlight Lib - required for Spelunkery and Verdant
	modCompileOnly("maven.modrinth:moonlight:fabric_1.20-${project.moonlight_version}")
	modLocalRuntime("maven.modrinth:moonlight:fabric_1.20-${project.moonlight_version}")

	// CLIENT-SIDE MODS FOR TESTING
	// EMI - recipe viewer
	modLocalRuntime("dev.emi:emi-fabric:${project.emi_version}+${project.minecraft_version}")
	// Jade - block info
	modLocalRuntime("maven.modrinth:jade:${project.jade_version}+fabric")
	// Mod Menu - mod list
	modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}")

	/*
	// dependencies of the below mods
	modLocalRuntime("net.fabricmc:fabric-language-kotlin:${project.kotlin_version}")
	modLocalRuntime("maven.modrinth:moonlight:fabric_1.20-${project.moonlight_version}")
	modLocalRuntime("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	modLocalRuntime("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
	modLocalRuntime("dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cca_version}")
	modLocalRuntime("dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cca_version}")
	modLocalRuntime("maven.modrinth:paucal:${project.paucal_version}")
	modLocalRuntime("maven.modrinth:cloth-config:${project.cloth_config_version}+fabric")
	modLocalRuntime("maven.modrinth:patchouli:${project.minecraft_version}-${project.patchouli_version}-fabric")
	modLocalRuntime("maven.modrinth:inline:${project.minecraft_version}-${project.inline_version}-fabric")
	modLocalRuntime("maven.modrinth:balm:${project.balm_version}+fabric-${project.minecraft_version}")
	modLocalRuntime("me.zeroeightsix:fiber:${project.fiber_version}")
	modLocalRuntime("com.github.Chocohead:Fabric-ASM:${project.fabricasm_version}")
	
	modCompileOnly("net.fabricmc:fabric-language-kotlin:${project.kotlin_version}")
	modCompileOnly("maven.modrinth:moonlight:fabric_1.20-${project.moonlight_version}")
	modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
	modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
	modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cca_version}")
	modCompileOnly("dev.onyxstudios.cardinal-components-api:cardinal-components-block:${project.cca_version}")
	modCompileOnly("maven.modrinth:paucal:${project.paucal_version}")
	modCompileOnly("maven.modrinth:cloth-config:${project.cloth_config_version}+fabric")
	modCompileOnly("maven.modrinth:patchouli:${project.minecraft_version}-${project.patchouli_version}-fabric")
	modCompileOnly("maven.modrinth:inline:${project.minecraft_version}-${project.inline_version}-fabric")
	modCompileOnly("maven.modrinth:balm:${project.balm_version}+fabric-${project.minecraft_version}")
	modCompileOnly("me.zeroeightsix:fiber:${project.fiber_version}")
	modCompileOnly("com.github.Chocohead:Fabric-ASM:${project.fabricasm_version}")
	//modLocalRuntime(include("io.github.tropheusj:serialization-hooks:${project.serialization_hooks_version}"))
	//modCompileOnly(include("io.github.tropheusj:serialization-hooks:${project.serialization_hooks_version}"))

	// OPTIONAL mods that i want access to the code for
	modCompileOnly("maven.modrinth:bundle-backportish:${project.bundle_backportish_version}")
	modCompileOnly("maven.modrinth:desiremod:${project.desire_version}-${project.minecraft_version}")
	modCompileOnly("maven.modrinth:farmers-delight-refabricated:${project.minecraft_version}-${project.farmers_delight_version}")
	modCompileOnly("maven.modrinth:items-displayed:${project.items_displayed_version}-${project.minecraft_version}")
	modCompileOnly("maven.modrinth:spelunkery:${project.minecraft_version}-${project.spelunkery_version}")
	modCompileOnly("maven.modrinth:verdant-mod:${project.minecraft_version}-${project.verdant_version}")

	// OPTIONAL mods for testing - comment out ones not to test with
	// mods also in the above section
	modLocalRuntime("maven.modrinth:bundle-backportish:${project.bundle_backportish_version}")
	modLocalRuntime("maven.modrinth:desiremod:${project.desire_version}-${project.minecraft_version}")
	modLocalRuntime("maven.modrinth:farmers-delight-refabricated:${project.minecraft_version}-${project.farmers_delight_version}")
	modLocalRuntime("maven.modrinth:items-displayed:${project.items_displayed_version}-${project.minecraft_version}")
	modLocalRuntime("maven.modrinth:spelunkery:${project.minecraft_version}-${project.spelunkery_version}")
	modLocalRuntime("maven.modrinth:verdant-mod:${project.minecraft_version}-${project.verdant_version}")
	// mods NOT in the above section
	modLocalRuntime("maven.modrinth:adorn:${project.adorn_version}-fabric")
	modLocalRuntime("maven.modrinth:amendments:1.20-${project.amendments_version}")
	modLocalRuntime("maven.modrinth:hex-casting:${project.hex_casting_version}")
	modLocalRuntime("maven.modrinth:supplementaries:${project.supplementaries_version}")
	modLocalRuntime("maven.modrinth:supplementaries-squared:1.20-${project.supplementaries_squared_version}")
	modLocalRuntime("maven.modrinth:waystones:${project.waystones_version}+fabric-${project.minecraft_version}")
	*/
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}